#!/usr/bin/env lua

--package.path = os.getenv("HOME") .. ";" .. package.path
require("luarocks.loader")

print("boostrapping minilib ...")
os.execute("minilib/setup")
print("done.")

local Sh = require("minilib.shell")
local Ut = require("minilib.util")
local Pr = require("minilib.process")
local M = require("minilib.monad")

local config_group = require("config").groups

local function update_configs(path, subhbs)
	print("#update_configs:", path)
	Pr.pipe()
		.add(Sh.find(path, "%.t$"))
		.add(function(f)
			if f then
				local cwd = require("lfs").currentdir()
			end
			return f
		end)
		.add(Sh.read())
		.add(Sh.sed(subhbs))
		.add(function(fline)
			if fline == nil then
				return nil
			end
			fline.path = fline.path:gsub("%.t", "")
			return fline
		end)
		.add(Sh.write("./"))
		.run()
end
local function termicon()
	print("#termicon, find")
	return Pr.pipe()
		.add(Sh.find("/usr/share/icons", "32.*terminal.*"))
		.add(function(f)
			return f
		end)
		.run()
end
local function default_subs(subs)
	subs["{term_icon}"] = termicon()
	return subs
end
local function prepare_config(name)
	local subcfg = require("config")
	local subhbs = default_subs({})
	for i, v in pairs(subcfg) do
		subhbs["{" .. i .. "}"] = v
	end
	update_configs(string.format("%s/", name), subhbs)
end
local function prepare_configs()
	local subcfg = require("config")
	local subhbs = default_subs({})
	for i, v in pairs(subcfg) do
		subhbs["{" .. i .. "}"] = v
	end
	update_configs("./", subhbs)
end
local function pre_setup_config(name)
	-- Sh.sh(string.format([[%s/setup]], name))
	local e = dofile(string.format([[%s/setup]], name))
	if e.dependsOn then
		local s, ls = e.dependsOn()
		if not s then
			print("dependsOn failed: ", name, Ut.tos(ls))
			return s, ls
		end
		print("dependsOn Ok: ", name, Ut.tos(ls))
	end
	return true
end
local function setup_config(name)
	-- Sh.sh(string.format([[%s/setup]], name))
	local e = dofile(string.format([[%s/setup]], name))
	if e.installer then
		e.installer()
	end
	if e.configure then
		e.configure()
	end
	print(name, "Ok")
	return 0
end
local function setup(name)
	local s, ls = pre_setup_config(name)
	if not s then
		return 1
	end
	setup_config(name)
end
local function setup_configs(name)
	local deplist = {}
	for _, v in pairs(config_group[name]) do
		if not (v.state == "noi") then
			local s, ls = pre_setup_config(name)
			if not s then
				table.insert(deplist, ls)
			end
		end
	end
	if #deplist > 1 then
		print("setup_configs failed:", name, Ut.tos(deplist))
		return 1
	end
	for k, v in pairs(config_group[name]) do
		if not (v.state == "noi") then
			setup_config(k)
		end
	end
	return 0
end

if arg[1] == nil then
	print("#setup *")
	-- common
	prepare_configs()
	-- groups
	setup_configs("common")
	setup_configs("openbox")
	setup_configs("bspwm")
	-- setup_configs("wayland_weston")
else
	print("#setup " .. arg[1])
	-- common
	prepare_config(arg[1])
	setup(arg[1])
end
