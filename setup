#!/usr/bin/env lua

require("luarocks.loader")
local Sh = require("minilib.shell")
local Ut = require("minilib.util")
local Pr = require("minilib.process")
local M = require("minilib.monad")

local distro_map = {
	["Debian"] = {
		pm_install = "sudo apt install --no-install-recommends %s",
		pm_update = "sudo apt update",
		pm_search = "apt-cache search %s",
		pm_installed = "dpkg -L | grep '^ii' | grep -P '%s' ",
		pm_pkgfile = "apt-file search '%s'",
	},
	["Fedora"] = {
		pm_install = "sudo dnf install -y %s",
		pm_update = "sudo dnf update",
		pm_search = "sudo dnf search %s",
		pm_installed = "rpm -q '%s'",
		pm_pkgfile = "sudo dnf search %s",
	},
}
local Cache = {
	instance = Sh.helper.lsb_release(),
}

local function ispkginst(name)
	local inst = Cache.instance
	local pm = distro_map[inst.distro]
	if pm then
		return Sh.helper.sh(string.format(pm.pm_installed, name))
	end
end
local function pkgfile(file)
	local inst = Cache.instance
	local pm = distro_map[inst.distro]
	if pm then
		if type(file) == "table" then
			file = M.List.of(file):join(" ")
		end
		local s, e, ls = Sh.helper.sh(string.format(pm.pm_install, file))
		if not s then
			print("pkgfile failed", e)
			return {}
		end
		local r = M.List.of(ls):fmap(function(l)
			local x, y = l:match("([%w%p]+):%s+([%w%p]+)")
			return { x, y }
		end)
		return r
	else
		print("unsupported distro", inst.distro)
		return {}
	end
end
local function pkginst(pkgs)
	local names
	if type(pkgs) == "table" then
		names = M.List.of(pkgs):join(" ")
	end
	print("#pkginst", names)
	local inst = Cache.instance
	local pm = distro_map[inst.distro]
	if not pm then
		print("unsupported distro", inst.distro)
		return { pkg = pkgs, status = 1 }
	end
	local s, e, ls = Sh.helper.sh(string.format(pm.pm_install, names))
	if not s then
		print("pkginst failed", e, Ut.tos(ls))
		return { pkg = pkgs, status = 1 }
	end
	print("#pkginst done", names, Ut.tos(ls))
	return { pkg = pkgs, status = 0 }
end
local function update_configs(path, subhbs)
	print("#update_configs:", path)
	Pr.pipe()
		.add(Sh.find(path, "%.t$"))
		.add(function(f)
			return f
		end)
		.add(Sh.read())
		.add(Sh.sed(subhbs))
		.add(function(fline)
			if fline == nil then
				return nil
			end
			fline.path = fline.path:gsub("%.t", "")
			return fline
		end)
		.add(Sh.write("./"))
		.run()
end
local function prepare_configs()
	print("prepare_configs")
	local subcfg = require("config")
	local subhbs = {}
	for i, v in pairs(subcfg) do
		subhbs["{" .. i .. "}"] = v
	end
	update_configs("./", subhbs)
end
local function handle_pkg_deps(e)
	local pkgs = M.List.of(e.depends):filter(function(v)
		return type(v) == "string"
	end)
	return pkginst(pkgs)
end
local function handle_github_deps(e)
	M.List
		.of(e.depends)
		:filter(function(v)
			if type(v) == "table" and v.method == "github" then
				return true
			end
			return false
		end)
		:fmap(function(v)
			local uri = string.format("curl -L https://raw.githubusercontent.com/%s/main/install | bash ", v.resource)
			print("#handle_github_deps", v.resource, "<-", uri)
			local s, er, ls = Sh.helper.sh(uri)
			print("handle_github_deps", v, s, er, Ut.tos(ls))
			return s, er
		end)
	return "done"
end
local function setup_config(cfg)
	print("#setup_config")
	prepare_configs()
	local cs = dofile(cfg)
	print(cs)
	for _, e in pairs(cs) do
		print("Try", e.path)
		if e.depends then
			handle_pkg_deps(e)
			handle_github_deps(e)
		end
		if e.installer then
			e.installer()
		end
		if e.configure then
			e.configure()
		end
		print("Ok")
	end
	return 0
end

setup_config(arg[1])
